let id = null;
let MASTER_MAPS = ['Siege', 'Flood'];
let SERVER_BLOCK_LIST = [""]; // Servers youre banned from, or who have ping restrictions
let maps = [];
let MAX_QUEUE = 6;
let pauseIfInGame = false;

function init()
{
	for(let m = 0; m < MASTER_MAPS.length; m++)
	{
	  maps.push(MASTER_MAPS[m]);
	}
	restart();
	checkForMaps();
}

function checkForMaps()
{
	log("Checking For Servers Running maps in our list..."); // used to print run time
	if(maps.length === 0)
	{
	  log("Either a wait is in effect, or maps array is empty");
	  return;
	}
	
	document.getElementsByClassName("serverbrowser-refresh")[0].click();
	setTimeout(()=> {	
		removeServerFinderUI();

		let elements = document.getElementsByClassName("server-row");
		let serversOfInterest = [];
		let inGame = false;
		for(let e = 0; e < elements.length; e++)
		{
		let map = elements[e].getElementsByClassName("server")[0].getElementsByClassName("map")[0];

		for(let m = 0; m < maps.length; m++)
		{
			if(map !== undefined && map.innerText !== undefined && map.innerText.includes(maps[m]))
			{
			log("In Game? " + inGame);
			let occupied = new Number(elements[e].getElementsByClassName("players")[0].getElementsByClassName("occupied")[0].innerText);
			let max = new Number(elements[e].getElementsByClassName("players")[0].getElementsByClassName("max")[0].innerText);
			let queueElements = elements[e].getElementsByClassName("players")[0].getElementsByClassName("queue");
			let hasQueue = queueElements.length > 0;
			let queue = hasQueue ? new Number(queueElements[0].innerText) : 0;
			if( (occupied/max) >= (20/64) && queue <= MAX_QUEUE)
			{
				if(pauseIfInGame && !inGame && document.getElementsByClassName("ugm-playing-misc").length > 0 && document.getElementsByClassName("ugm-playing-misc")[0].innerText.trim() === elements[e].getElementsByClassName("server")[0].getElementsByClassName("server-name")[0].innerText.trim())
				{
					log("Marking as in game");
					inGame = true;
				}
				if(!inGame && !SERVER_BLOCK_LIST.includes(elements[e].getElementsByClassName("server")[0].getElementsByClassName("server-name")[0].innerText))
				{
					log("New server of interest: " + elements[e].getElementsByClassName("server")[0].getElementsByClassName("server-name")[0].innerText + " - " + map.innerText);
					serversOfInterest.push(elements[e].getElementsByClassName("server")[0].getElementsByClassName("server-name")[0].innerText + " - " + map.innerText);
				}
			}
				}
		}
		
		}
		reportFindings(serversOfInterest);
	}, 2000);
}

function stop()
{
	removeServerFinderUI();
	log("Clearing " + id);
	clearInterval(id);
}
function removeServerFinderUI()
{
	const parent = document.getElementById("base-page");
	const existingEntity = document.getElementById('server-finder');
	if(existingEntity !== null && existingEntity !== undefined)
	{
		parent.removeChild(existingEntity)
	}
}

function reportFindings(findings)
{
	const parent = document.getElementById("base-page");
	const contentDiv = document.createElement("div");
	contentDiv.id = "server-finder";
	contentDiv.style.backgroundColor = "red";
	contentDiv.style.width = "30%";
	contentDiv.style.height = "50%";
	contentDiv.style.top= "50%";
	contentDiv.style.position = "absolute";
	//contentDiv.style.left = 0;
	contentDiv.style.right= "0px";
	contentDiv.style.zIndex = 99999;
	if(findings.length > 0)
	{
		let p1 = document.createElement("p");
		let br1 = document.createElement("br");
		p1.textContent= new Date();
		p1.appendChild(br1);
		p1.style.marginTop= "5px";
		p1.style.marginLeft= "5px";
		contentDiv.appendChild(p1);
		for(let so = 0; so < findings.length; so++)
		{
			let p = document.createElement("p");
			let br = document.createElement("br");
			p.textContent = findings[so];
			p.style.marginTop= "5px";
			p.style.marginLeft= "5px";
			p.appendChild(br);
			contentDiv.appendChild(p);
		}
		parent.appendChild(contentDiv);
	}
// uncomment the lines below, and comment the lines above to get the new window with the results instead.
/*
	if(findings.length > 0)
	{
		let result = new Date() + "\n</br>";
		for(let so = 0; so < findings.length; so++)
		{
				result += findings[so] +"\n </br>";
		}
		var w = window.open('','','width=800,height=300');
		w.document.write(result)
		w.focus()
		setTimeout(function() {w.close();}, 15000)
		log("JOIN "+result);
	}
*/
}

function restart()
{
	if(id !== null)
	{
	  stop();
	  log("Restarting...");
	}
	log("Starting... ");
	id = setInterval(checkForMaps, 1000*60);
	log("New ID is " + id);
}

function pause(minutes)
{
	log("Erasing maps for " + minutes + " minutes");
	maps = [];
	setTimeout(repopulateMaps, (minutes*(60000)));
}

function repopulateMaps()
{
	log("Repopulating map array");
	maps = [];
	sessionStorage.setItem("savedMaps", maps);
	init();
}

function addMap(map)
{
	log("Added Map " + map);
	maps.push(map);
	MASTER_MAPS.push(map);
//	sessionStorage.setItem("savedMaps", maps);
}

function addTestMaps()
{
	addMap("Golmud");
	addMap("Zavod");
}

function removeMap(map)
{
	log("Removing map " + map);
	MASTER_MAPS.pop(map);
	maps.pop(map);
	printActiveMaps();
}
function log(toLog)
{
    console.log(new Date() + ((toLog === null || toLog === undefined || toLog === "") ? "" : (" - " + toLog)));
}

function help()
{
	console.log("Before copying and pasting in the Console in Dev Tools on the battlelog Multiplayer page, add part of the map name to MASTER_MAPS on line 2 (Caps are important).");
	console.log("Use pause(**Minutes to pause**); to pause the script");
	console.log("stop() completely stops the script (Refreshing or closing the multiplayer tab will do the same thing)");
	console.log("addMap(**part of map Name in quotes**) will add a map to your list when the script is already running (Caps are important)");
	console.log("removeMap(**part of map Name in quotes**) will remove a map to your list when the script is already running (Caps are important)");
	console.log("repopulateMaps() will un-pause manually");
	console.log("restart() will (re)start the script");
}

function printActiveMaps()
{
	log("Active Maps: " + JSON.stringify(maps));
}
init();
